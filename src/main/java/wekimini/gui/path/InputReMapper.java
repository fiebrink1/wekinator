/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wekimini.gui.path;

import java.util.ArrayList;
import java.util.List;
import wekimini.Path.ModelState;
import wekimini.Wekinator;
import wekimini.gui.LabelLabelRow;
import wekimini.gui.NameDropdownRow;
import wekimini.gui.path.PathEditorFrame;
import wekimini.learning.Model;
import wekimini.learning.ModelBuilder;
import wekimini.osc.OSCOutput;
import wekimini.util.Util;

/**
 *
 * @author rebecca
 */
public class InputReMapper extends javax.swing.JFrame {

    private final Wekinator w;

    private final List<NameDropdownRow> rows = new ArrayList<>();
    
    private final InputRemappingReceiver inputMappingReceiver;

    private final int outputNumber;
    
    /**
     * Creates new form OSCInputStatusFrame
     */
    public InputReMapper() {
        initComponents();
        this.w = null;
        inputMappingReceiver = null;
        outputNumber = -1;
    }

    public InputReMapper(final Wekinator w, 
            OSCOutput oscOutput,
            ModelBuilder modelBuilder,
            Model model,
            ModelState modelState,
            String[] loadedNames, 
            String[] currentProjectNames, 
            int[] selectedIndices,
            int outputNumber,
            InputRemappingReceiver recv) {
        initComponents();
        inputMappingReceiver = recv;
        this.w = w;
        int numInputs = loadedNames.length;
        this.outputNumber = outputNumber;
        
        panelInputsParent.removeAll();

        labelOutputName.setText(model.getPrettyName());
        labelOutputType1.setText(PathEditorFrame.getOscOutputDescription(oscOutput));
        labelModelType.setText(modelBuilder.getPrettyName());
        
        LabelLabelRow labels = new LabelLabelRow("Input in file:", "Input in project:");
        panelInputsParent.add(labels);
        
        for (int i = 0; i < numInputs; i++) {
            NameDropdownRow r = new NameDropdownRow(loadedNames[i], currentProjectNames);
            r.setSelectedIndex(selectedIndices[i]);
            rows.add(r);
            panelInputsParent.add(r);
        }
        panelInputsParent.repaint();
    }
    
    public interface InputRemappingReceiver {
        void setNamesAndDataPrefs(String[] names, boolean importData, boolean preventRetraining);
        void cancel();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        label1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelInputsParent = new javax.swing.JPanel();
        nameDropdownRow1 = new wekimini.gui.NameDropdownRow();
        nameDropdownRow2 = new wekimini.gui.NameDropdownRow();
        nameDropdownRow3 = new wekimini.gui.NameDropdownRow();
        nameDropdownRow4 = new wekimini.gui.NameDropdownRow();
        buttonApply = new javax.swing.JButton();
        checkImportData = new javax.swing.JCheckBox();
        buttonCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelOutputType1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelModelType = new javax.swing.JLabel();
        labelOutputName = new javax.swing.JLabel();
        checkPreventRetraining = new javax.swing.JCheckBox();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Finish model loading");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        label1.setText("<html>Please specify how each input name in the saved file corresponds to the input name used in the current project:</html>");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panelInputsParent.setBackground(new java.awt.Color(255, 255, 255));
        panelInputsParent.setLayout(new javax.swing.BoxLayout(panelInputsParent, javax.swing.BoxLayout.Y_AXIS));
        panelInputsParent.add(nameDropdownRow1);
        panelInputsParent.add(nameDropdownRow2);
        panelInputsParent.add(nameDropdownRow3);
        panelInputsParent.add(nameDropdownRow4);

        jScrollPane1.setViewportView(panelInputsParent);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
        );

        buttonApply.setText("OK");
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        checkImportData.setSelected(true);
        checkImportData.setText("<html>Import this model's training data into the current project training set, so that you may incrementally adjust this model later. (This will not impact your other models.)</html>");
        checkImportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkImportDataActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Output name: ");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Output type:");

        jLabel3.setText("       ");

        labelOutputType1.setText("Numeric output, real values");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Model type:");

        labelModelType.setText("Neural Network");

        labelOutputName.setText("jLabel4");

        checkPreventRetraining.setSelected(true);
        checkPreventRetraining.setText("<html>Prevent this model from re-training and overwriting itself. (You can re-enable training at anytime using the build icon on the model row in the GUI.)</html>");
        checkPreventRetraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPreventRetrainingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonApply))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(checkImportData, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelOutputName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelModelType)
                                    .addComponent(labelOutputType1))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                    .addComponent(checkPreventRetraining, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelOutputName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel3))
                    .addComponent(labelOutputType1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(labelModelType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkImportData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkPreventRetraining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonApply)
                    .addComponent(buttonCancel)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed
        int[] selectedIndices = new int[rows.size()];
        String[] selectedNames = new String[rows.size()];
        for (int i = 0; i < rows.size(); i++) {
            selectedIndices[i] = rows.get(i).getSelectedIndex();
            selectedNames[i] = rows.get(i).getSelectedItem();
        }
        
/*        String outputText = textOutputName.getText();
        if (outputText.isEmpty()) {
            Util.showPrettyErrorPane(this, "Please provide a name for this output.");
            return;
        }
        
        String[] existingOutputs = w.getOutputManager().getOutputGroup().getOutputNames();
        for (int i = 0; i < existingOutputs.length; i++) {
            if (i != outputNumber && outputText.equals(existingOutputs[i])) {
                Util.showPrettyErrorPane(this, "The output name \'"
                        + outputText + "\' is already used for a different output in this project.");
                return;
            }
        } */
        
        for (int i = 0; i < rows.size(); i++) {
            for (int j = i+1; j < rows.size(); j++) {
                if (selectedIndices[i] == selectedIndices[j]) {
                    String msg = "You have selected input \'" + selectedNames[i]
                            + "\' more than once.";
                    Util.showPrettyErrorPane(this, msg);
                    return;
                }
            } 
        }
        inputMappingReceiver.setNamesAndDataPrefs(selectedNames, checkImportData.isSelected(), checkPreventRetraining.isSelected());
        this.dispose();    
    }//GEN-LAST:event_buttonApplyActionPerformed

    private void checkImportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkImportDataActionPerformed
        
    }//GEN-LAST:event_checkImportDataActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        inputMappingReceiver.cancel();
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void checkPreventRetrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPreventRetrainingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkPreventRetrainingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputReMapper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputReMapper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputReMapper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputReMapper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputReMapper().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApply;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JCheckBox checkImportData;
    private javax.swing.JCheckBox checkPreventRetraining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel labelModelType;
    private javax.swing.JLabel labelOutputName;
    private javax.swing.JLabel labelOutputType1;
    private wekimini.gui.NameDropdownRow nameDropdownRow1;
    private wekimini.gui.NameDropdownRow nameDropdownRow2;
    private wekimini.gui.NameDropdownRow nameDropdownRow3;
    private wekimini.gui.NameDropdownRow nameDropdownRow4;
    private javax.swing.JPanel panelInputsParent;
    // End of variables declaration//GEN-END:variables
}
